/*#include<stdio.h>
#include<string.h>
#define max 100
int push(char[],char,int);
int pop(char[],int,char[],int*);
int operators(char,char[],int,int*,char[]);
void main()
{
    char infix[max],postfix[max],stack[max];
    int l,i=0,j=0,top=0;
    gets(infix);
    l=strlen(infix);
    infix[l]=')';
    infix[l+1]=0;
    stack[top]='(';
    while(infix[i]!=0)
    {
        if(infix[i]=='(')
            top=push(stack,'(',top);
        else if((infix[i]>='a'&&infix[i]<='z')||(infix[i]>='A'&&infix[i]<='Z'))
        {
            postfix[j]=infix[i];
            j++;
        }
        else if(infix[i]==')')
        {
            while(stack[top]!='(')
                top=pop(stack,top,postfix,&j);
            top--;
        }
        else
        {

            top=operators(infix[i],stack,top,&j,postfix);
        }
        i++;
    }
    postfix[j]=0;
    puts(postfix);
}
int push(char stack[],char ch,int top)
{
    if(top==(max-1))
        printf("Stack is full");
    else
    {
        top++;
        stack[top]=ch;
    }
    return top;
}
int pop(char stack[],int top,char postfix[],int *j)
{
    char x;
   if(top==-1)
        printf("Stack is empty");
   else
   {
        x=stack[top];
           postfix[*j]=x;
           printf("rRam");
           (*j)++;
        top--;
   }
   return top;
}
int operators(char ch,char stack[],int top,int *j,char postfix[])
{
    if(ch=='^')
        top=push(stack,ch,top);
    else if(ch=='/')
    {
        if(stack[top]=='*'||stack[top]=='^'||stack[top]=='%')
        {
            top=pop(stack,top,postfix,&j);
            top++;
            stack[top]=ch;
        }
        else
            top=push(stack,ch,top);
    }
    else if(ch=='*')
    {
        if(stack[top]=='/'||stack[top]=='^'||stack[top]=='%')
        {
            top=pop(stack,top,postfix,&j);
            top++;
            stack[top]=ch;
        }
        else
            top=push(stack,ch,top);
    }
    else if(ch=='+')
    {
        if(stack[top]=='*'||stack[top]=='^'||stack[top]=='%'||stack[top]=='-'||stack[top]=='/')
        {
            top=pop(stack,top,postfix,&j);
            top++;
            stack[top]=ch;
        }
        else
            top=push(stack,ch,top);
    }
    else if(ch=='-')
    {
        if(stack[top]=='*'||stack[top]=='^'||stack[top]=='%'||stack[top]=='+'||stack[top]=='/')
         {
             top=pop(stack,top,postfix,&j);
             top++;
            stack[top]=ch;
         }
        else
            top=push(stack,ch,top);
    }
    else if(ch=='%')
    {
        if(stack[top]=='/'||stack[top]=='^'||stack[top]=='*')
        {
             top=pop(stack,top,postfix,&j);
             top++;
            stack[top]=ch;
        }
        else
            top=push(stack,ch,top);
    }
    return top;
}*/
#include<stdio.h>
typedef struct list
{
    int data;
    struct list*next;
}sl;
void main()
{
    sl *p=NULL,*l=NULL,*r=NULL;
    int ch;
    while(1)
    {
        p=(sl*)malloc(sizeof(sl));
        if(p==NULL)
            printf("Memory not allocated.");
        else
        {
            scanf("%d",&p->data);
            if(r==NULL && l==NULL)
                l=r=p;
            else
            {
                r->next=p;
                r=p;
            }
            printf("Do u want to continue");
            scanf("%d",&ch);
            if(ch==0)
                break;
        }
    }
    r->next=NULL;
    p=l;
    while(p!=NULL)
    {
        printf("%d ",p->data);
        p=p->next;
    }
}
