//singly
#include<stdio.h>
#include<stdlib.h>
typedef struct list
{
    int data;
    struct list *next;
}sl;
sl* insert(sl*);
void main()
{
    sl *p=NULL,*l=NULL,*r=NULL;
    int ch;
    while(1)
    {
        p=(sl*)malloc(sizeof(sl));
        p->next=NULL;
        if(p==NULL)
            printf("Memory not allocated.");
        else
        {
            scanf("%d",&p->data);
            if(r==NULL && l==NULL)
                l=r=p;
            else
            {
                r->next=p;
                r=p;
            }
            printf("Do u want to continue");
            scanf("%d",&ch);
            if(ch==0)
            {
                break;
            }
        }
    }
    l=insert(l);
    p=l;
    while(p!=0)
    {
        printf("%d ",p->data);
        p=p->next;
    }
}
sl* insert(sl* l)
{
    sl*p=NULL,*head=l,*h=l;
    int k,c=1,cnt=0;
    while(head!=0)
    {
        cnt++;
        head=head->next;
    }
    head=l;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data: ");
    scanf("%d",&p->data);
    printf("Enter from last which node you want to insert: ");
    scanf("%d",&k);
    if(k==cnt+1)
    {
        p->next=l;
        return p;
    }
    /*while(c!=k)
    {
        c++;
        h=h->next;
    }
    while(h->next!=0)
    {
        head=head->next;
        h=h->next;
    }
    p->next=head->next;
    head->next=p;
    return l;*/
    if(k==1)
    {
        while(head->next!=0)
            head=head->next;
        p->next=head->next;
        head->next=p;
        return l;
    }
    while(c<cnt-k)
    {
        c++;
        h=h->next;
    }
    p->next=h->next;
    h->next=p;
    return l;
}
//circular
#include<stdio.h>
#include<stdlib.h>
typedef struct list
{
    int data;
    struct list *next;
}sl;
sl* insert(sl*);
void main()
{
    sl *p=NULL,*l=NULL,*r=NULL;
    int ch;
    while(1)
    {
        p=(sl*)malloc(sizeof(sl));
        p->next=NULL;
        if(p==NULL)
            printf("Memory not allocated.");
        else
        {
            scanf("%d",&p->data);
            if(r==NULL && l==NULL)
                l=r=p;
            else
            {
                r->next=p;
                r=p;
            }
            printf("Do u want to continue");
            scanf("%d",&ch);
            if(ch==0)
            {
                r->next=l;
                break;
            }
        }
    }
    l=insert(l);
    p=l;
    printf("%d ",p->data);
    p=p->next;
    while(p!=l)
    {
        printf("%d",p->data);
        p=p->next;
    }
}
sl* insert(sl* l)
{
    sl*p=NULL,*head=l->next,*h=l;
    int k,c=1,cnt=1;
    while(head!=l)
    {
        cnt++;
        head=head->next;
    }
    head=l;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data: ");
    scanf("%d",&p->data);
    printf("Enter from last which node you want to insert: ");
    scanf("%d",&k);
    if(k==cnt+1)
    {
        while(h->next!=l)
            h=h->next;
        h->next=p;
        p->next=l;
        return p;
    }
    while(c!=k)
    {
        c++;
        h=h->next;
    }
    while(h->next!=l)
    {
        head=head->next;
        h=h->next;
    }
    p->next=head->next;
    head->next=p;
    return l;
}
//double
#include<stdio.h>
#include<stdlib.h>
typedef struct list
{
    int data;
    struct list *next;
    struct list *prev;
}sl;
sl* insert(sl*);
void main()
{
sl *p=NULL,*l=NULL,*r=NULL;
    int c;
    while(1)
    {
        p=(sl*)malloc(sizeof(sl));
        p->next=NULL;
        p->prev=NULL;
        if(p==NULL)
            printf("Memory not allocated.");
        else
        {
            printf("Enter a value: ");
            scanf("%d",&p->data);
            if(l==NULL)
            {
                l=r=p;
                p->prev=0;
                p->next=0;
            }
            else
            {
                p->prev=r;
                r->next=p;
                r=p;
            }
            printf("Do you want to continue: ");
            scanf("%d",&c);
            if(c==0)
            {
                break;
            }
        }
    }
    l=insert(l);
    p=l;
    while(p!=0)
    {
        printf("%d ",p->data);
        p=p->next;
    }
}
sl* insert(sl* l)
{
    sl*p=NULL,*head=l,*h=l;
    int k,c=1,cnt=0;
    while(head!=0)
    {
        cnt++;
        head=head->next;
    }
    head=l;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data: ");
    scanf("%d",&p->data);
    printf("Enter from last which node you want to insert: ");
    scanf("%d",&k);
    if(k==cnt+1)
    {
        p->next=l;
        p->prev=0;
        return p;
    }
    while(c!=k)
    {
        c++;
        h=h->next;
    }
    while(h->next!=0)
    {
        head=head->next;
        h=h->next;
    }
    p->next=head->next;
    p->prev=head;
    head->next=p;
    head->next->prev=p;
    return l;
}
//double circular
#include<stdio.h>
#include<stdlib.h>
typedef struct list
{
    int data;
    struct list *next;
    struct list *prev;
}sl;
sl* insert(sl*);
void main()
{
    sl *p=NULL,*l=NULL,*r=NULL;
    int c;
    while(1)
    {
        p=(sl*)malloc(sizeof(sl));
        p->next=NULL;
        p->prev=NULL;
        if(p==NULL)
            printf("Memory not allocated.");
        else
        {
            printf("Enter a value: ");
            scanf("%d",&p->data);
            if(l==NULL)
            {
                l=r=p;
            }
            else
            {
                p->prev=r;
                r->next=p;
                r=p;
            }
            printf("Do you want to continue: ");
            scanf("%d",&c);
            if(c==0)
            {
                l->prev=r;
                r->next=l;
                break;
            }
        }
    }
    l=insert(l);
    p=l;
    printf("%d ",p->data);
    p=p->next;
    while(p!=l)
    {
        printf("%d ",p->data);
        p=p->next;
    }
}
sl* insert(sl* l)
{
    sl*p=NULL,*head=l,*h=l;
    int k,c=1,cnt=1;
    while(head->next!=l)
    {
        cnt++;
        head=head->next;
    }
    head=l;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data: ");
    scanf("%d",&p->data);
    printf("Enter from last which node you want to insert: ");
    scanf("%d",&k);
    if(k==cnt+1)
    {
        while(h->next!=l)
            h=h->next;
        h->next=p;
        p->next=l;
        p->prev=h;
        return p;
    }
    while(c!=k)
    {
        c++;
        h=h->next;
    }
    while(h->next!=l)
    {
        head=head->next;
        h=h->next;
    }
    p->next=head->next;
    p->prev=head;
    head->next=p;
    head->next->prev=p;
    return l;
}
