#include<stdio.h>
typedef struct list
{
    int data;
    struct list*next;
}sl;
sl* del_first(sl*,sl*);
void del_last(sl*,sl*);
sl* insertbeforefirst(sl*);
void insertbeforelast(sl*,sl*);
void insertafterfirst(sl*);
sl* insertafterlast(sl*);
void dltatany(sl *);
void insertafteratany(sl*);
void insertbeforeatany(sl*);
void main()
{
    sl *p=NULL,*l=NULL,*r=NULL;
    int ch;
    while(1)
    {
        p=(sl*)malloc(sizeof(sl));
        p->next=NULL;
        if(p==NULL)
            printf("Memory not allocated.");
        else
        {
            scanf("%d",&p->data);
            if(r==NULL && l==NULL)
                l=r=p;
            else
            {
                r->next=p;
                r=p;
            }
            printf("Do u want to continue");
            scanf("%d",&ch);
            if(ch==0)
            {
                r->next=l;
                break;
            }
        }
    }
    //del_last(l,r);
    //l=del_first(l,r);
    //l=insertbeforefirst(l);
    //r=insertafterlast(r);
    //insertafterfirst(l,r);
    //insertbeforelast(l,r);
    //dltatany(l);
    //insertafteratany(l);
    insertbeforeatany(l);
    p=l;
    printf("%d ",p->data);
    p=p->next;
    while(p!=l)
    {
        printf("%d ",p->data);
        p=p->next;
    }
}
sl* del_first(sl *l,sl *r)
{
    sl*p=l;
    r->next=l->next;
    l=l->next;
    l->prev=p->prev;
    free(p);
    return l;
}
void del_last(sl*l,sl*r)
{
    while(l->next!=r)
        l=l->next;
    l->next=r->next;
    free(r);
}
sl* insertbeforefirst(sl *l)
{
    sl*p=NULL,*s=l;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data: ");
    scanf("%d",&p->data);
    p->next=l;
    while(s->next!=l)
        s=s->next;
    s->next=p;
    return p;
}
sl* insertafterlast(sl *r)
{
    sl *p=NULL;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data");
    scanf("%d",&p->data);
    p->next=r->next;
    r->next=p;
    return p;
}
void insertafterfirst(sl*l)
{
    sl*p=NULL;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data");
    scanf("%d",&p->data);
    p->next=l->next;
    l->next=p;
}
void insertbeforelast(sl*l,sl*r)
{
    sl*p=NULL,*s=l;
    p=(sl*)malloc(sizeof(sl));
    printf("Enter data");
    scanf("%d",&p->data);
    while(s->next->next!=l)
        s=s->next;
    p->next=s->next;
    s->next=p;
}
void dltatany(sl*l)
{
    sl *p=l;
    int info;
    printf("Enter data to delete: ");
    scanf("%d",&info);
    while(p!=NULL)
    {
        if(p->next->data==info)
            break;
        p=p->next;
    }
    l=p->next;
    p->next=p->next->next;
    free(l);
}
void insertafteratany(sl *l)
{
    sl *p=NULL,*ll=l;
    int info;
    p=(sl*)malloc(sizeof(sl*));
    printf("Enter data: ");
    scanf("%d",&p->data);
    printf("Enter data after which to insert: ");
    scanf("%d",&info);
    while(ll!=NULL)
    {
        if(ll->data==info)
            break;
        ll=ll->next;
    }
    p->next=ll->next;
    ll->next=p;
}
void insertbeforeatany(sl *l)
{
    sl *p=NULL,*ll=l;
    int info;
    p=(sl*)malloc(sizeof(sl*));
    printf("Enter data: ");
    scanf("%d",&p->data);
    printf("Enter data after which to insert: ");
    scanf("%d",&info);
    while(ll!=NULL)
    {
        if(ll->next->data==info)
            break;
        ll=ll->next;
    }
    p->next=ll->next;
    ll->next=p;
}
